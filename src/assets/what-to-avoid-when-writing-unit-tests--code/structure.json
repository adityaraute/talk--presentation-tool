{
  "ORDER": [
    "cover-slide-01",
    "engineers-in-a-bar",
    "what-are-unit-tests",
    "talk-details",
    "art-form",
    "test-code-in-production",
    "not--well-factored",

    "in-the-test",
    "dry-principle",
    "non-deterministic",
    "side-effects",
    "too-much",
    "bad-test-double",
    "false-positives",
    "private"
  ],

  "STYLE": [
    ".outer-wrapper {",
    "  background: url(\"/assets/images/grid--green.jpeg\");",
    "  background-repeat: no-repeat;",
    "  background-size: cover;",
    "  color: #69f0ae;",
    "  font-family: Arial, sans-serif;",
    "}"
  ],
  
  "cover-slide-01": {
    "title": "What to Avoid When Writing Unit Tests",
    "type": "cover-slide-01",
    "author": "Bob Fornal"
  },
  "cover-slide-02": {
    "title": "What to Avoid When Writing Unit Tests",
    "type": "cover-slide-02",
    "author": "Bob Fornal"
  },
  "engineers-in-a-bar": {
    "title": "",
    "type": "text-image",
    "orientation": "left",
    "text": "A QA Engineer walks into a bar.<br/><br/><ul><li>Orders a beer.</li><li>Orders 0 beers.</li><li>Orders 999,999,999,999 beers.</li><li>Orders a lizard.</li><li>Orders -1 beers.</li><li>Orders a ueicbksjdhd.</li></ul><br/>The first real customer walks in and asks where the bathroom is.  The bar bursts into flames, killing everyone.",
    "image": "/assets/images/beers-on-the-wall.png"
  },
  "what-are-unit-tests": {
    "title": "What Are Unit Tests?",
    "type": "panel-single",
    "text": "<ul><li>Unit Tests exercise small parts of the application (code-under-test).</li><li>... in complete isolation.</li><li>... actual behavior versus expected behavior.</li></ul><ul><li>Unit Tests should be fast, simple, and stable.</li></ul><ul><li>Unit Tests reflect the specifications.</li><li>... can act as documentation.</li></ul><ul><li>Unit Tests are a safety net.</li><li>... provide immediate feedback about code changes.</li><li>... find and fix bugs earlier.</li><li>... contribute to higher code quality and better architecture.</li><li>... faster detection of code smells.</li></ul>"
  },
  "talk-details": {
    "title": "Talk Details",
    "type": "panel-single",
    "text": "Code Repository: https://github.com/bob-fornal/what-to-avoid-when-writing-unit-tests<br/><br/>I can be found at ...<br><ul><li>https://linqapp.com/conference</li><li>Twitter: @rfornal</li><li>Articles https://dev.to/rfornal</li><li>LinkedIn: https://www.linkedin.com/in/rfornal/</li></ul>"
  },
  "art-form": {
    "title": "",
    "type": "text-image",
    "orientation": "left",
    "text": "Testing Code has been described as an \"art form\"<br/><br/>It is, ... but it shouldn't be.",
    "image": "/assets/images/bob-ross.png"
  },
  "test-code-in-production": {
    "title": "",
    "type": "image-only",
    "image": "/assets/images/vader-testing-production.png"
  },
  "not--well-factored": {
    "title": "Tests Should Not Be \"Well Factored\"",
    "type": "panel-double",
    "textLeft": "<div class=\"bold\">Keep the Reader in the test.</div><br/><div class=\"bold\">Given</div><div class=\"indent\">A function that returns a score.</div><br/><div class=\"bold;\">Problem</div><div class=\"indent\">The unit test has has some part of it abstracted in a way that makes reading the test difficult.</div>",
    "textRight": "<div class=\"bold\">Dare to violate the DRY Principle.</div><div>“Duplication of Code Logic”</div><br/><div class=\"bold\">Given</div><div class=\"indent\">A function that adjusts a score.</div><br/><div class=\"bold\">Problem</div><div class=\"indent\">The unit test has has some part of it abstracted in a way that makes reading the test difficult.</div>"
  },

  "in-the-test": {
    "title": "Keep The Reader In The Test",
    "type": "code-editor",
    "folder": "test-001",
    "files": [
      "manager.js",
      "manager.NOT.spec.js",
      "manager.spec.js"
    ]
  },
  "dry-principle": {
    "title": "Dry Principle",
    "type": "code-editor",
    "files": [
      "manager.js",
      "manager.NOT.spec.js",
      "manager.spec.js"
    ]
  },
  "non-deterministic": {
    "title": "Non-Deterministic",
    "type": "code-editor",
    "files": [
      "time.NOT.js",
      "time.NOT.spec.js",
      "time.js",
      "time.spec.js"
    ]
  }
}